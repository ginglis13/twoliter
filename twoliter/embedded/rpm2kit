#!/usr/bin/env bash
#
# Create a kit from RPM package inputs.
set -eu -o pipefail

declare -a PACKAGES

for opt in "$@"; do
   optarg="$(expr "${opt}" : '[^=]*=\(.*\)')"
   case "${opt}" in
      --packages-dir=*) PACKAGES_DIR="${optarg}" ;;
      --package=*) PACKAGES+=("${optarg}") ;;
      --output-dir=*) OUTPUT_DIR="${optarg}" ;;
   esac
done

# import the oci helper functions
# shellcheck source=ocihelper
. "${0%/*}/ocihelper"

KIT_DIR="${OUTPUT_DIR}/${ARCH}"

rm -rf "${KIT_DIR}"

mkdir -p "${KIT_DIR}/Packages"
for pkg in ${PACKAGES} ; do
  mkdir -p "${KIT_DIR}/Packages/${pkg}"
  find "${PACKAGES_DIR}/${pkg}" \
    -mindepth 1 \
    -maxdepth 1 \
    -name "*.${ARCH}.rpm" \
    ! -name '*-debuginfo-*' \
    ! -name '*-debugsource-*' \
    -size +0c \
    -exec install -p -m 0644 -t "${KIT_DIR}/Packages/${pkg}" {} \+
  # Set a reproducible timestamp on the directory, so that the tar archive for
  # this package will be the same if the package has not otherwise changed.
  refpkg="$(ls -1 "${PACKAGES_DIR}/${pkg}" | awk 'NR==1 {pkg = $0} END {print pkg}')"
  touch -r "${PACKAGES_DIR}/${pkg}/${refpkg}" "${KIT_DIR}/Packages/${pkg}"
done

createrepo_c "${KIT_DIR}"
dnf --disablerepo '*' --repofrompath "kit,file:///${KIT_DIR}" repoquery

WORK_DIR="$(mktemp -d)"

# Clean up working directories to reduce size of layer.
cleanup() {
  rm -rf /tmp/*
}
trap 'cleanup' EXIT

TIMESTAMP="$(date +"%FT%T.%NZ")"
FILENAME_PREFIX="${KIT:?}-v${VERSION_ID:?}-${BUILD_ID:?}-${ARCH:?}"
# Translate ARCH into the proper docker arch
case "${ARCH}" in
  "x86_64")
  DOCKER_ARCH="amd64"
  ;;
  "aarch64")
  DOCKER_ARCH="arm64"
  ;;
esac

# Create the content layers
mkdir -p "${WORK_DIR}/blobs/sha256"

# Store each directory in the repo as a separate layer, to minimize overhead
# when pushing and pulling a kit that only has a few modified packages.
declare -A LAYER_DIGESTS
for layer in ${PACKAGES[@]} repodata ; do
  [ "${layer}" != "repodata" ] && layer="Packages/${layer}"
  layer_archive="${WORK_DIR}/content-layer.tar"
  tar -cvf "${layer_archive}" --sort=name -C "${KIT_DIR}" "${layer}"
  layer_digest="$(digest_from_file "${layer_archive}")"
  mv "${layer_archive}" "${WORK_DIR}/blobs/sha256/${layer_digest}"
  layer_size="$(stat -c %s "${WORK_DIR}/blobs/sha256/${layer_digest}")"
  LAYER_DIGESTS["${layer_digest}"]="${layer_size}"
done

# Generate a JSON list of diff IDs for the layers.
declare -a CONTENT_DIGESTS
CONTENT_DIGESTS=(${!LAYER_DIGESTS[@]})
CONTENT_DIGESTS=(${CONTENT_DIGESTS[@]/#/sha256:})
DIFF_IDS="$(jq --null-input --compact-output '$ARGS.positional // []' --args ${CONTENT_DIGESTS[@]})"

# Generate a JSON list of objects for the layers.
declare -a LAYER_OBJECTS
for layer_digest in ${!LAYER_DIGESTS[@]} ; do
  layer_size="${LAYER_DIGESTS[${layer_digest}]}"
  layer='{"mediaType":"application/vnd.oci.image.layer.v1.tar",'
  layer+='"digest":"'"sha256:${layer_digest}"'",'
  layer+='"size":'"${layer_size}"'}'
  LAYER_OBJECTS+=(${layer})
done
LAYERS="$(echo ${LAYER_OBJECTS[@]} | jq --slurp --compact-output)"

METADATA_TEMPLATE=$(cat <<EOF
{
  name: "$KIT",
  version: "$VERSION_ID",
  sdk: .[0].sdk,
  kit: (
    [ .[1] | values[] | {name: ., version: "$VERSION_ID", vendor: "$VENDOR"}]
    + [ .[0].kit[] | {name: .name, version: .version, vendor: .vendor } ]
 )
}
EOF
)
declare -a LOCAL_KITS
LOCAL_KITS=("${LOCAL_KIT_DEPENDENCIES}")
# convert local kits to a correctly-formatted JSON list
# we disable spellcheck for the line because we want it to split elements
# shellcheck disable=SC2068
LOCAL_KIT_INPUT="$(jq --null-input --compact-output '$ARGS.positional // []' --args ${LOCAL_KITS[@]})"
EXTERNAL_KIT_INPUT="$(cat "/bypass/${EXTERNAL_KIT_METADATA}")"
KIT_INPUT="${EXTERNAL_KIT_INPUT} ${LOCAL_KIT_INPUT}"
KIT_METADATA="$(jq --compact-output --sort-keys --slurp "${METADATA_TEMPLATE}" <<< "${KIT_INPUT}" )"
METADATA="$(base64 -w0 <<< "${KIT_METADATA}")"
CONFIG="$(jq --compact-output <<EOF
{
  "architecture": "${DOCKER_ARCH}",
  "config": {
    "Env": [],
    "WorkingDir": "/",
    "OnBuild": null,
    "Labels": {
      "dev.bottlerocket.kit.v2": "${METADATA}"
    }
  },
  "created": "${TIMESTAMP}",
  "history": [],
  "os": "linux",
  "rootfs": {
    "type": "layers",
    "diff_ids": ${DIFF_IDS}
  }
}
EOF
)"
CONFIG_DIGEST="$(digest_from_blob "${CONFIG}")"
echo "${CONFIG}" > "${WORK_DIR}/blobs/sha256/${CONFIG_DIGEST}"

# Create the OCI Manifest
CONFIG_SIZE="$(stat -c %s "${WORK_DIR}/blobs/sha256/${CONFIG_DIGEST}")"
MANIFEST="$(jq --compact-output <<EOF
{
  "schemaVersion": 2,
  "mediaType": "application/vnd.oci.image.manifest.v1+json",
  "config": {
    "mediaType": "application/vnd.oci.image.config.v1+json",
    "digest": "sha256:${CONFIG_DIGEST}",
    "size": ${CONFIG_SIZE}
  },
  "layers": ${LAYERS}
}
EOF
)"
MANIFEST_DIGEST="$(digest_from_blob "${MANIFEST}")"
echo "${MANIFEST}" > "${WORK_DIR}/blobs/sha256/${MANIFEST_DIGEST}"
MANIFEST_SIZE="$(stat -c %s "${WORK_DIR}/blobs/sha256/${MANIFEST_DIGEST}")"

# Create the OCI index
jq --compact-output <<EOF >> "${WORK_DIR}/index.json"
{
  "schemaVersion": 2,
  "manifests": [
    {
      "mediaType": "application/vnd.oci.image.manifest.v1+json",
      "digest": "sha256:${MANIFEST_DIGEST}",
      "size": ${MANIFEST_SIZE},
      "annotations": {
        "org.opencontainers.image.created": "${TIMESTAMP}"
      },
      "platform": {
        "architecture": "${DOCKER_ARCH}",
        "os": "linux"
      }
    }
  ]
}
EOF

# Create the layout file and create the oci tarball
echo '{"imageLayoutVersion": "1.0.0"}' > "${WORK_DIR}/oci-layout"
tar -cf "${OUTPUT_DIR}/${FILENAME_PREFIX}.tar" -C "${WORK_DIR}" .
